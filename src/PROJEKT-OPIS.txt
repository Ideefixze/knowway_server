Projekt korzysta z paradygmatu programowania obiektowego, istnieją podziały na klasy oraz zastosowałem dziedziczenie.

Zastosowałem zasady SOLID:
S - klasa Resource/User nie martwi się o zapisywanie na dysku a jedynie o rzeczy jej dotyczące. Podobnie jest z klasami Simple_DB, które mają jedynie za zadanie odczytywać i zapisywać dane na dysku
O - klasy są otwarte na rozszerzenia ale ich zmiana kłopotliwa. Nie byłoby problemem stworzenie nowych funkcjonalności do klas i nowych typów zasobów jak i przekierowań serwera HTTP. Przykład: na samym końcu projektu implementowałem ranking, zatem dodałem funkcjonalność do klas Simple_DB, która co minutę tworzy ranking i zapisuje w pliku txt. Serwer natomiast prosi o odczytanie przez bazę danych pierwsze X pozycji rankingu i renderuje template HTML przesyłając użytkownikowi. Cały ten 'ficzer' był prosty do dodania.
L - stosuję klasę bazową Resource, która jest używana przez inne klasy i nie posiada ona zależności od klasy pochodnej (Wikipedia, Polona).
I - w projekcie nie stosuję interfejsów, ponieważ uznałem to za zbędne.
D - możliwe, że złamałem tą zasadę w Server i klasami Simple_DB_User oraz Simple_DB_Resource świadomie, ponieważ uznałem, że klasa Simple_DB byłaby zbyt ogólna: sposób działania na User oraz Resource mógł się znacząco różnić a taka abstrakcja (moim zdaniem) byłaby zbędną, biorąc pod uwagę też skalę projektu oraz fakt, że owe Simple_DB nie będą wykorzystywane nigdzie indziej niż w klasie Server.


Zastosowałem dwa wzorce projektowe:

Singleton: klasa Server powinna być tylko jedna jedyna w trakcie uruchomienia programu oraz powinna być widoczna przez inne klasy. Był by problem jakby programista uruchomił serwer dwukrotnie i generowałoby to błędy.
Factory: ResourceFactory tworzy odpowiedni Resource z linku (<domena>/<typ>?<dane zapytania>) oraz tworzy odpowiedni Resource z pliku JSON.

Jak uruchomić?
Wymagania:

Python3
oraz moduły:
Flask_WTF==0.14.3
Flask==1.1.2
wikipedia==1.4.0
WTForms==2.3.1
requests==2.23.0

    Python3 - https://www.python.org/downloads/
    Flask - [pip install Flask] na windowsowym CMD lub: https://flask.palletsprojects.com/en/1.1.x/installation/ 
Nie potrzebujemy virtual environment bo nie mamy zbyt wielu zależności.
    Flask_WTF - pip install Flask-WTF
    requests - pip install requests
    WTForms - pip install WTForms
    Wikipedia API - pip install wikipedia albo: https://pypi.org/project/wikipedia/

Instrukcja:
Przed jakimkolwiek uruchomieniem:
Pamiętaj by upewnić się, że folder stats, resources oraz users istnieją w folderze src i jeżeli testujesz, że są puste!
Dodaj zmienną środowiskową: C:\path\to\app\src>set FLASK_APP=server.py
Uruchom server.py uzywajac cmd -> python.exe <directory>/server.py i wejdź http://127.0.0.1:5000/ w przeglądarce.
Zamknij server Ctrl+C.

By uruchomić unit-testy, które się zmieniły: python.exe <directory>/unit_tests.py.

